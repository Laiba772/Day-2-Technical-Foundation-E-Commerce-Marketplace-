             Day 2 Task: Technical Foundation for Niche E-Commerce Marketplace.

Step 1: Define Technical Requirements.

1. Frontend Design:
                   A responsive frontend built with React.js/Next.js, TailwindCSS, ShadCN UI, 
                 React Hook Form, and TypeScript to create a fast and interactive user interface.

- Pages to Design:

  - Homepage: 
             Highlight featured chairs and sofas, a search bar, and categories.

  - Product Listing Page:
                       Display products with filters for price, material, and size.

  - Customization Page:
                      Allow users to customize furniture (color, material, size).

  - Cart Page:
              Show selected items, pricing, and quantity adjustments.

  - Checkout Page:
                  Collect address and payment details.

2. Backend as Sanity CMS Integration:
                                    Use A scalable backend powered by Sanity CMS, Next.js API routes, 
                                    Stripe for payments, ShipEngine for shipping, and Clerk for 
                                    authentication. The backend will ensure seamless interaction between 
                                    the front end, CMS, and external APIs.

3. Third-Party APIs:

               - Payment Gateway: Integrate Meezan Bank, Al-Habib Bank, Easypaisa and 
                                  Jazzcash for secure payments.
             - Shipment Tracking API: Use EasyPost or AfterShip to provide 
                                     tracking information.



               ---------------------------xxxxxxxxxxxxxxxxxxxxx---------------------------



Step 2: Plan System Architecture

System Diagram:

Below is the architecture showing the interaction between components:


         [Frontend (Next.js)] --> [Sanity CMS] --> [Product Data API]
                  |                      |
         [Third-Party API] -----> [Shipment Tracking API]
                  |
         [Payment Gateway]


Explanation:
            A high-level architecture diagram includes:

Frontend:
        React/Next.js application.

Backend: 
        API endpoints powered by Next.js and Sanity CMS.

Database: 
        Sanity CMS will serve as both the content management system and the primary database f
        or managing orders, assets, and other relevant data.

Third-Party Services: 
                    Stripe for payments, ShipEngine for shipping, SendGrid for transactional emails,
                    and Clerk for user authentication.


           ------------------------xxxxxxxxxxxxxxxxxxx------------------------


Step 3: Define API Requirements:

1. API Endpoint: /products

                   Method: GET

                   Description:Yeh API mery Sanity CMS se saare available products fetch karegi.
                            Iska use Product Listing Page aur Product Details Page ke liye hoga.

                   Response Example:
                                    [
                                      {
                                        "id": "101",
                                        "name": "Modern Chair",
                                        "price": 5000,
                                        "stock": 10,
                                        "image": "url-to-image.jpg"
                                      },
                                      {
                                        "id": "102",
                                        "name": "Luxury Sofa",
                                        "price": 25000,
                                        "stock": 5,
                                        "image": "url-to-image2.jpg"
                                      }
                                    ]
                                    
Use Case:
         Jab user Products Page par aayega, frontend ye endpoint call karega aur CMS se product
         ka data render karega.

2. API Endpoint: /orders
                    Method: POST
   
                   Description:
                        Ye API ek naya order create karegi aur usse Sanity CMS mein save karegi. 
                        Iska use Checkout Page ke liye hoga jab user apne order ko confirm karega.

                  Payload Example:
                                  {
                                   "customerInfo": {
                                   "name": "Ali Khan",
                                   "email": "ali@example.com",
                                   "address": "123 Street, Lahore"
                                  },
                                 "orderDetails": [
                                       { "productId": "101", "quantity": 2 },
                                       { "productId": "102", "quantity": 1 }
                                 ],
                                  "paymentStatus": "Paid"
                                 }

                Response Example:
                                {
                                 "orderId": "5001",
                                 "status": "Order Created Successfully",
                                 "totalPrice": 35000
                                }

Use Case:
        Jab user Checkout Page par "Place Order" button click karega, ye API backend par 
       order ko save karegi aur frontend ko confirmation dikhayegi.

3. API Endpoint: /shipment

             Method: GET

             Description:
                       Ye API kisi bhi order ka shipment status fetch karegi using a third-party 
               service jaise Easypaisa. Iska use Order Tracking Page ya Order Dashboard par hoga.

            Request Example:
                          URL: /shipment?orderId=5001
                  Response Example:
    
                              {
                                "shipmentId": "2001",
                                "orderId": "5001",
                                "status": "In Transit",
                                "expectedDelivery": "2025-01-20"
                              }

    Use Case:
           Jab user apne order ka delivery status dekhna chahe, ye API real-time tracking data
           fetch karegi aur user ko dikhayegi.

**How These APIs Align with My Marketplace:

/products:

          Helps fetch product details dynamically for product browsing and filtering.

/orders:

         Ensures order placement is seamless and accurately saved in the CMS.

/shipment:

        Adds real-time delivery tracking functionality, which is crucial for user satisfaction.

2. Sanity CMS Schema Example:

export default {
  name: "product",
  type: "document",
  title: "Product",
  fields: [
    {
      name: "name",
      type: "string",
      title: "Product Name",
    },
    {
      name: "price",
      type: "number",
      title: "Price",
    },
    {
      name: "description",
      type: "text",
      title: "Description",
    },
    {
      name: "category",
      type: "string",
      title: "Category",
    },
    {
      name: "image",
      type: "image",
      title: "Product Image",
    },
    {
      name: "customization",
      type: "object",
      fields: [
        { name: "color", type: "string", title: "Color" },
        { name: "material", type: "string", title: "Material" },
        { name: "size", type: "string", title: "Size" },
      ],
    },
  ],
};


**Third-Party Integrations:
                         Stripe: 
                                Secure payment processing. Integrate for handling payments and generating 
                                 invoices.

                        ShipEngine:
                                   Real-time shipping quotes and tracking integration.

                        Cloud Storage:
                                     Store uploaded assets and designs.

                        Email Notifications (SendGrid):
                                      Use SendGrid for sending order confirmations, shipping updates, 
                                      and account-related emails.

                        Clerk for Authentication: 
                                                 Handling secure user authentication and registration.

**Technology Stack:
                  Frontend: 
                           React.js, Next.js, TailwindCSS, ShadCN UI, Fabric.js, Framer Motion.

                  Backend: 
                          Node.js, Sanity CMS, Next.js API routes.

                  Database:
                            Sanity CMS for dynamic content and database management (products, orders, assets,
                             and user data).

                  APIs:
                       REST-based with JSON responses.

Final Deliverables:

                  1. A complete system architecture diagram.
                  2. Defined API endpoints and schemas.
                  3. Draft of Sanity CMS schemas.
                  4. Complete documentation covering architecture, APIs, and workflows.

               ------------------------------xxxxxxxxxxxxxxxxxxxxxxxx------------------------------

    prepared by Laiba Naz Monday 2 To 5pm.